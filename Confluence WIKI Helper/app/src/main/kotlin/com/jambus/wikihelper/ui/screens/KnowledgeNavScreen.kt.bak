package com.jambus.wikihelper.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.jambus.wikihelper.data.model.KnowledgeDocument
import com.jambus.wikihelper.ui.theme.PrimaryBlue
import com.jambus.wikihelper.ui.viewmodel.KnowledgeViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun KnowledgeNavScreen(
    viewModel: KnowledgeViewModel = hiltViewModel()
) {
    val documents by viewModel.documents.collectAsState()
    var searchQuery by remember { mutableStateOf("") }
    var selectedDepartment by remember { mutableStateOf("全部") }
    var selectedType by remember { mutableStateOf("全部") }
    
    val departments = listOf("全部", "人事", "财务", "技术", "市场")
    val documentTypes = listOf("全部", "政策", "流程", "FAQ", "手册")
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("知识库", fontWeight = FontWeight.Bold) },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = PrimaryBlue,
                    titleContentColor = Color.White
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(Color(0xFFF5F5F5))
        ) {
            // 搜索栏
            SearchBar(
                query = searchQuery,
                onQueryChange = { searchQuery = it },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            )
            
            // 筛选器
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                FilterChip(
                    selected = selectedDepartment,
                    onSelectedChange = { selectedDepartment = it },
                    items = departments,
                    label = "部门"
                )
                
                FilterChip(
                    selected = selectedType,
                    onSelectedChange = { selectedType = it },
                    items = documentTypes,
                    label = "类型"
                )
            }
            
            // 文档列表
            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                items(
                    documents.filter { doc ->
                        (selectedDepartment == "全部" || doc.department == selectedDepartment) &&
                        (selectedType == "全部" || doc.type == selectedType) &&
                        (searchQuery.isEmpty() || doc.title.contains(searchQuery, ignoreCase = true) ||
                         doc.content.contains(searchQuery, ignoreCase = true))
                    }
                ) { document ->
                    DocumentCard(document)
                }
            }
        }
    }
}

@Composable
fun SearchBar(
    query: String,
    onQueryChange: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    OutlinedTextField(
        value = query,
        onValueChange = onQueryChange,
        modifier = modifier,
        placeholder = { Text("搜索知识库...") },
        leadingIcon = {
            Icon(
                imageVector = Icons.Default.Search,
                contentDescription = "搜索"
            )
        },
        singleLine = true,
        shape = RoundedCornerShape(24.dp),
        colors = OutlinedTextFieldDefaults.colors(
            focusedBorderColor = PrimaryBlue,
            unfocusedBorderColor = Color.Gray
        )
    )
}

@Composable
fun FilterChip(
    selected: String,
    onSelectedChange: (String) -> Unit,
    items: List<String>,
    label: String
) {
    var expanded by remember { mutableStateOf(false) }
    
    Box {
        FilterChip(
            selected = true,
            onClick = { expanded = true },
            label = { Text("$label: $selected") },
            leadingIcon = {
                Icon(
                    imageVector = Icons.Default.FilterList,
                    contentDescription = null,
                    modifier = Modifier.size(16.dp)
                )
            }
        )
        
        DropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false }
        ) {
            items.forEach { item ->
                DropdownMenuItem(
                    text = { Text(item) },
                    onClick = {
                        onSelectedChange(item)
                        expanded = false
                    }
                )
            }
        }
    }
}

@Composable
fun DocumentCard(document: KnowledgeDocument) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { /* TODO: 打开文档详情 */ },
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // 文档图标
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(RoundedCornerShape(8.dp))
                    .background(Color(0xFFE3F2FD)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = getDocumentIcon(document.type),
                    contentDescription = document.type,
                    tint = PrimaryBlue,
                    modifier = Modifier.size(24.dp)
                )
            }
            
            // 文档信息
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = document.title,
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = document.department,
                        fontSize = 12.sp,
                        color = Color.Gray
                    )
                    Text(
                        text = document.lastUpdated,
                        fontSize = 12.sp,
                        color = Color.Gray
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // 评分
                Row {
                    repeat(5) { index ->
                        Icon(
                            imageVector = if (index < document.rating) Icons.Default.Star else Icons.Default.StarOutline,
                            contentDescription = null,
                            tint = if (index < document.rating) Color(0xFFFFD700) else Color.Gray,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun getDocumentIcon(type: String) = when (type.lowercase()) {
    "pdf" -> Icons.Default.PictureAsPdf
    "word", "doc", "docx" -> Icons.Default.Description
    "excel", "xls", "xlsx" -> Icons.Default.TableChart
    else -> Icons.Default.InsertDriveFile
}